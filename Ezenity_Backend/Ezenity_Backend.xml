<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ezenity_Backend</name>
    </assembly>
    <members>
        <member name="T:Ezenity_Backend.Attributes.AuthorizeV2Attribute">
            <summary>
            Custom attribute to handle authorization for specified roles. 
            Implements the <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter"/> interface to handle custom authorization logic.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Attributes.AuthorizeV2Attribute._roles">
            <summary>
            Internal field holding a list of roles that are allowed to access the resource.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Attributes.AuthorizeV2Attribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Attributes.AuthorizeV2Attribute"/> class.
            </summary>
            <param name="roleNames">An array of role names that are authorized to access the resource.</param>
        </member>
        <member name="M:Ezenity_Backend.Attributes.AuthorizeV2Attribute.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            Handles the authorization logic. This method is called by the framework before the controller action is invoked.
            </summary>
            <param name="context">Provides access to the <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>, action descriptors, and more.</param>
        </member>
        <member name="T:Ezenity_Backend.Attributes.RequestHeaderMatchesMediaTypeAttribute">
            <summary>
            Represents an attribute that is used to constrain an action method so it handles only HTTP requests
            that contain one of the specified media types in one of the request headers.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Attributes.RequestHeaderMatchesMediaTypeAttribute._mediaTypes">
            <summary>
            Stores the media types to be matched against.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Attributes.RequestHeaderMatchesMediaTypeAttribute._requestHeaderToMatch">
            <summary>
            The request header that should contain the media type to match.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Attributes.RequestHeaderMatchesMediaTypeAttribute.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Attributes.RequestHeaderMatchesMediaTypeAttribute"/> class.
            </summary>
            <param name="requestHeaderToMatch">The name of the request header to match against.</param>
            <param name="mediaType">The primary media type to match.</param>
            <param name="otherMediaTypes">Additional media types to match.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when requestHeaderToMatch or mediaType is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when mediaType or otherMediaTypes are not valid media types.</exception>
        </member>
        <member name="P:Ezenity_Backend.Attributes.RequestHeaderMatchesMediaTypeAttribute.Order">
            <summary>
            Gets the order value for determining the order of execution of action constraints.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Attributes.RequestHeaderMatchesMediaTypeAttribute.Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext)">
            <summary>
            Determines whether this instance accepts the specified action constraint context.
            </summary>
            <param name="context">The action constraint context.</param>
            <returns>
              <c>true</c> if this instance accepts the specified action constraint context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Ezenity_Backend.Controllers.AccountsController">
            <summary>
            Handles HTTP requests and responses related to Account entities.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Controllers.AccountsController._accountService">
            <summary>
            The service containing business logic for Account entities.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Controllers.AccountsController._logger">
            <summary>
            Provides logging capabilities for this class.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Controllers.AccountsController.CurrentAccount">
            <summary>
            Gets the current authenticated account.
            </summary>
            <value>The current authenticated account.</value>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.#ctor(Ezenity_Backend.Services.Common.IAccountService,Microsoft.Extensions.Logging.ILogger{Ezenity_Backend.Controllers.AccountsController})">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Controllers.AccountsController"/> class.
            </summary>
            <param name="accountService">The service to use for account-related operations.</param>
            <param name="logger">The logger used for logging any events in this class.</param>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.GetByIdAsync(System.Int32)">
            <summary>
            Fetches an account by its ID asynchronously.
            </summary>
            <param name="id">The ID of the account to fetch.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing an <see cref="T:Ezenity_Backend.Models.ApiResponse`1"/>. 
            The ApiResponse contains the status code, success flag, and a message indicating the result of the operation.
            </returns>
            <response code="200">Returns the account details if found.</response>
            <response code="404">Returns a not found response if the account does not exist.</response>
            <response code="500">Returns if an internal server error occurs.</response>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.GetAllAsync(System.String,System.String)">
            <summary>
            Fetches all accounts from the database asynchronously.
            </summary>
            <remarks>
            This method fetches all accounts available in the database and returns them as a list. 
            It is protected by an "Admin" authorization, meaning only admin users can access it.
            </remarks>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing an <see cref="!:ApiResponse&lt;IEnumerable&lt;AccountResponse&gt;&gt;"/>.
            The ApiResponse contains the status code, success flag, and a message indicating the result of the operation.
            </returns>
            <response code="200">Returns a list of all accounts if found.</response>
            <response code="404">Returns a not found response if no accounts exist.</response>
            <response code="500">Returns if an internal server error occurs.</response>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.CreateAsync(Ezenity_Backend.Models.Accounts.CreateAccountRequest)">
            <summary>
            Creates a new account asynchronously.
            </summary>
            <param name="model">The <see cref="T:Ezenity_Backend.Models.Accounts.CreateAccountRequest"/> model containing the account details to be created.</param>
            <remarks>
            This method creates a new account based on the provided CreateAccountRequest model.
            The method is protected by "Admin" authorization, meaning only admin users can access it.
            If the account with the given email already exists, a conflict response is returned.
            </remarks>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing an <see cref="T:Ezenity_Backend.Models.ApiResponse`1"/>.
            The ApiResponse contains the status code, success flag, and a message indicating the result of the operation.
            </returns>
            <response code="201">Returns a created response if the account is successfully created.</response>
            <response code="409">Returns a conflict response if an account with the given email already exists.</response>
            <response code="500">Returns if an internal server error occurs.</response>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.UpdateAsync(System.Int32,Ezenity_Backend.Models.Accounts.UpdateAccountRequest)">
            <summary>
            Asynchronously updates an existing account.
            </summary>
            <param name="id">The identifier of the account to be updated.</param>
            <param name="model">The <see cref="T:Ezenity_Backend.Models.Accounts.UpdateAccountRequest"/> model containing the new account details.</param>
            <remarks>
            This method updates an existing account based on the provided identifier and UpdateAccountRequest model.
            It is authorized for use by any authenticated user.
            Multiple error conditions are handled, such as resource not found, authorization failure, or conflict with existing resources.
            </remarks>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing an <see cref="T:Ezenity_Backend.Models.ApiResponse`1"/>.
            The ApiResponse contains the status code, success flag, the updated account data, and a message indicating the result of the operation.
            </returns>
            <response code="200">Returns an OK response if the account is successfully updated.</response>
            <response code="404">Returns a not found response if the account with the specified ID does not exist.</response>
            <response code="401">Returns an unauthorized response if the caller lacks necessary permissions.</response>
            <response code="409">Returns a conflict response if updating the account would cause a conflict.</response>
            <response code="500">Returns an internal server error if an unexpected error occurs.</response>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the account with the specified ID does not exist.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AuthorizationException">Thrown when the caller lacks necessary permissions.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceAlreadyExistsException">Thrown if updating the account would cause a conflict.</exception>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.UpdatePartialAsync(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{Ezenity_Backend.Models.Accounts.UpdateAccountRequest})">
            <summary>
            Asynchronously updates partially on an existing account.
            </summary>
            <param name="id">The identifier of the account to be updated partially.</param>
            <param name="model">The <see cref="T:Ezenity_Backend.Models.Accounts.UpdateAccountRequest"/> model containing the new account details.</param>
            <remarks>
            This method partially updates an existing account based on the provided identifier and UpdateAccountRequest model.    
                
            This request updates the account's **First Name**:    
                
                PATCH /api/accounts/{id} \
                { \
                    "Title": "Mr.", \
                    "FirstName": "John", \
                    "LastName": "Doe" \
                } \
                 
            **Note**: All fields are optional and can be patched individually. The update is partial; fields not provided will not be updated.    
                
            It is authorized for use by any authenticated user who are the Role Admin.    
            Multiple error conditions are handled, such as resource not found, authorization failure, or conflict with existing resources.
            </remarks>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing an <see cref="T:Ezenity_Backend.Models.ApiResponse`1"/>.
            The ApiResponse contains the status code, success flag, the updated account data, and a message indicating the result of the operation.
            </returns>
            <response code="200">Returns an OK response if the account is successfully updated.</response>
            <response code="404">Returns a not found response if the account with the specified ID does not exist.</response>
            <response code="401">Returns an unauthorized response if the caller lacks necessary permissions.</response>
            <response code="409">Returns a conflict response if updating the account would cause a conflict.</response>
            <response code="500">Returns an internal server error if an unexpected error occurs.</response>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the account with the specified ID does not exist.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AuthorizationException">Thrown when the caller lacks necessary permissions.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceAlreadyExistsException">Thrown if updating the account would cause a conflict.</exception>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.DeleteAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously deletes an account.
            </summary>
            <param name="DeleteAccountId">The identifier of the account to be deleted.</param>
            <param name="DeletedById">The identifier of the account performing the deletion.</param>
            <remarks>
            This method deletes an existing account with the given identifier (DeleteAccountId) and logs who performed the deletion (DeletedById).
            The function is authorized for use by any authenticated user.
            Multiple error conditions are handled, such as resource not found, authorization failure, or deletion failure.
            </remarks>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing an <see cref="T:Ezenity_Backend.Models.ApiResponse`1"/>.
            The ApiResponse contains the status code, success flag, a message indicating the result of the operation, and a DeleteResponse object.
            </returns>
            <response code="200">Returns an OK response if the account is successfully deleted.</response>
            <response code="404">Returns a not found response if the account with the specified ID does not exist.</response>
            <response code="401">Returns an unauthorized response if the caller lacks necessary permissions.</response>
            <response code="400">Returns a bad request response if the deletion fails for some specific reason.</response>
            <response code="500">Returns an internal server error if an unexpected error occurs.</response>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the account with the specified ID does not exist.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AuthorizationException">Thrown when the caller lacks necessary permissions.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.DeletionFailedException">Thrown if the deletion fails for some specific reason.</exception>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.AuthenticateAsync(Ezenity_Backend.Models.Accounts.AuthenticateRequest)">
            <summary>
            Asynchronously authenticates a user account.
            </summary>
            <param name="model">The authentication request model containing the credentials.</param>
            <remarks>
            This endpoint is used to authenticate a user based on the provided credentials.
            If authentication is successful, a refresh token is set in a cookie.
            The method handles various conditions like account not found or any unexpected server errors.
            The endpoint is accessible via POST to "authenticate".
            </remarks>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing an <see cref="T:Ezenity_Backend.Models.ApiResponse`1"/>.
            The ApiResponse contains the status code, success flag, a message indicating the result of the operation, and an AuthenticateResponse object.
            </returns>
            <response code="200">Returns an OK response if authentication is successful, along with the authentication response data.</response>
            <response code="404">Returns a not found response if the account associated with the credentials does not exist.</response>
            <response code="500">Returns an internal server error if an unexpected error occurs.</response>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the account associated with the provided credentials does not exist.</exception>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.RefreshTokenAsync">
            <summary>
            Asynchronously refreshes the JWT token.
            </summary>
            <remarks>
            This endpoint is accessed via POST to "refresh-token".
            The method attempts to fetch the refresh token from the cookie, and if it exists,
            it interacts with the account service to obtain a new JWT token.
            </remarks>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing an <see cref="T:Ezenity_Backend.Models.ApiResponse`1"/>.
            The ApiResponse will have status code, success flag, and a message indicating the result of the operation, 
            along with an AuthenticateResponse object.
            </returns>
            <response code="200">Returns OK if the token is successfully refreshed, along with the authentication response data.</response>
            <response code="400">Returns BadRequest if the refresh token is missing or invalid.</response>
            <response code="500">Returns Internal Server Error if any unexpected error occurs.</response>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the refresh token is missing or invalid.</exception>
            <exception cref="T:System.Exception">Thrown when any unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.RevokeTokenAsync(Ezenity_Backend.Models.Accounts.RevokeTokenRequest)">
            <summary>
            Asynchronously revokes a JWT token.
            </summary>
            <remarks>
            This endpoint is accessed via POST to "revoke-token" and is authorized only for Admin roles.
            A service filter for loading the account is applied before executing this method.
            The method first validates the input model for the presence of the token either in the model or in cookies.
            The token is then checked against the loaded account to ensure it is owned by the same account.
            Finally, the token is revoked using the account service.
            </remarks>
            <param name="model">The <see cref="T:Ezenity_Backend.Models.Accounts.RevokeTokenRequest"/> containing the token to be revoked.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> that indicates the result of the token revocation.
            </returns>
            <response code="200">Returns OK with a message indicating that the token has been successfully revoked.</response>
            <response code="400">Returns BadRequest if the token is not provided.</response>
            <response code="401">Returns Unauthorized if the token is not owned by the loaded account.</response>
            <exception cref="T:System.Exception">Thrown when any unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.RegisterAsync(Ezenity_Backend.Models.Accounts.RegisterRequest)">
            <summary>
            Asynchronously registers a new account.
            </summary>
            <remarks>
            This endpoint is accessed via POST to "register".
            The method attempts to register a new account using the provided model and origin header.
            If the registration is successful, a 200 OK status code is returned with a success message.
            </remarks>
            <param name="model">The <see cref="T:Ezenity_Backend.Models.Accounts.RegisterRequest"/> containing the account registration details.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> that indicates the result of the registration.</returns>
            <response code="200">Returns OK with a message indicating successful registration.</response>
            <response code="409">Returns Conflict if the account already exists.</response>
            <response code="400">Returns BadRequest if the request parameters are not valid.</response>
            <response code="500">Returns a StatusCode of 500 if an unexpected error occurs.</response>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.VerfiyEmailAsync(Ezenity_Backend.Models.Accounts.VerifyEmailRequest)">
            <summary>
            Asynchronously verifies the email address of an account.
            </summary>
            <remarks>
            This endpoint is accessed via POST to "verify-email".
            The method attempts to verify the email address using a token provided in the request model.
            If the verification is successful, a 200 OK status code is returned with a success message.
            </remarks>
            <param name="model">The <see cref="T:Ezenity_Backend.Models.Accounts.VerifyEmailRequest"/> containing the email verification token.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> that indicates the result of the email verification.</returns>
            <response code="200">Returns OK with a message indicating successful email verification.</response>
            <response code="500">Returns a StatusCode of 500 if the token is invalid or an unexpected error occurs.</response>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.ForgotPasswordAsync(Ezenity_Backend.Models.Accounts.ForgotPasswordRequest)">
            <summary>
            Initiates the password reset process by sending a password reset token to the user's email.
            </summary>
            <param name="model">A <see cref="T:Ezenity_Backend.Models.Accounts.ForgotPasswordRequest"/> object containing the email of the account to reset.</param>
            <returns>A message indicating that a password reset instruction has been sent to the user's email.</returns>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.ValidateResetTokenAsync(Ezenity_Backend.Models.Accounts.ValidateResetTokenRequest)">
            <summary>
            Validates the provided password reset token.
            </summary>
            <param name="model">A <see cref="T:Ezenity_Backend.Models.Accounts.ValidateResetTokenRequest"/> object containing the reset token to be validated.</param>
            <returns>A message indicating the validity of the provided reset token.</returns>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.ResetPasswordAsync(Ezenity_Backend.Models.Accounts.ResetPasswordRequest)">
            <summary>
            Resets the account's password using the provided reset token and new password.
            </summary>
            <param name="model">A <see cref="T:Ezenity_Backend.Models.Accounts.ResetPasswordRequest"/> object containing the reset token and new password.</param>
            <returns>A message indicating the password has been reset and the user can now login.</returns>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.setTokenCookie(System.String)">
            //////////////////
            Helper Methods ///
            //////////////////
            <summary>
            Sets a cookie that holds the provided token, with options for security and expiration.
            </summary>
            <param name="token">The token to be stored in the cookie.</param>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.ipAddress">
            <summary>
            Retrieves the client's IP address from the HTTP request headers or connection information.
            </summary>
            <returns>The client's IP address as a string.</returns>
        </member>
        <member name="M:Ezenity_Backend.Controllers.AccountsController.IsTokenOwner(System.String)">
            <summary>
            Checks if the current account owns the provided token.
            </summary>
            <param name="token">The token to be checked for ownership.</param>
            <returns>A boolean value indicating whether the current account owns the token.</returns>
        </member>
        <member name="T:Ezenity_Backend.Controllers.BaseController`5">
            <summary>
            Provides a generic base controller to encapsulate CRUD operations.
            This controller is designed to be extended by other controllers that require CRUD functionalities.
            </summary>
            <typeparam name="TEntity">The type representing the data model of the entity.</typeparam>
            <typeparam name="TResponse">The type representing the response data shape.</typeparam>
            <typeparam name="TCreateRequest">The type representing the creation request model.</typeparam>
            <typeparam name="TUpdateRequest">The type representing the update request model.</typeparam>
            <typeparam name="TDeleteResponse">The type representing the delete response model.</typeparam>
        </member>
        <member name="P:Ezenity_Backend.Controllers.BaseController`5.Entity">
            <summary>
            Gets the entity object associated with the current HTTP context.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Controllers.BaseController`5.GetByIdAsync(System.Int32)">
            <summary>
            Retrieves a single entity by its identifier.
            </summary>
            <param name="id">The identifier of the entity to be retrieved.</param>
            <returns>An action result containing an API response with the entity data.</returns>
        </member>
        <member name="M:Ezenity_Backend.Controllers.BaseController`5.GetAllAsync(System.String,System.String)">
            <summary>
            Retrieves all entities. Access restricted to Admin role.
            </summary>
            <returns>An action result containing an API response with a list of entities.</returns>
        </member>
        <member name="M:Ezenity_Backend.Controllers.BaseController`5.CreateAsync(`2)">
            <summary>
            Creates a new entity based on the provided creation model. Access restricted to Admin role.
            </summary>
            <param name="model">The creation model for the new entity.</param>
            <returns>An action result containing an API response with the created entity data.</returns>
        </member>
        <member name="M:Ezenity_Backend.Controllers.BaseController`5.UpdateAsync(System.Int32,`3)">
            <summary>
            Updates an existing entity with the provided data.
            </summary>
            <param name="id">The identifier of the entity to be updated.</param>
            <param name="model">The update model containing the new data.</param>
            <returns>An action result containing an API response with the updated entity data.</returns>
        </member>
        <member name="M:Ezenity_Backend.Controllers.BaseController`5.DeleteAsync(System.Int32,System.Int32)">
            <summary>
            Deletes an existing entity identified by the given identifier.
            </summary>
            <param name="DeleteAccountId">The identifier of the entity to be deleted.</param>
            <param name="DeletedById">The identifier of the user who is deleting the entity.</param>
            <returns>An action result containing an API response with the status of the deletion operation.</returns>
        </member>
        <member name="T:Ezenity_Backend.Controllers.EmailTemplatesController">
            <summary>
            Controller for managing email templates. Inherits from the BaseController class to provide CRUD operations.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Controllers.EmailTemplatesController._emailTemplateService">
            <summary>
            Service responsible for email template related functionalities.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Controllers.EmailTemplatesController._authService">
            <summary>
            Service responsible for authentication related functionalities.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Controllers.EmailTemplatesController._accountService">
            <summary>
            Service responsible for account related functionalities.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Controllers.EmailTemplatesController._logger">
            <summary>
            Logger instance for logging important or error information.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Controllers.EmailTemplatesController.#ctor(Ezenity_Backend.Services.Common.IEmailTemplateService,Ezenity_Backend.Services.Common.IAuthService,Ezenity_Backend.Services.Common.IAccountService,Microsoft.Extensions.Logging.ILogger{Ezenity_Backend.Controllers.EmailTemplatesController})">
            <summary>
            Initializes a new instance of the EmailTemplatesController class.
            </summary>
            <param name="emailTemplateService">The email template service.</param>
            <param name="authService">The authentication service.</param>
            <param name="accountService">The account service.</param>
            <param name="logger">The logger service.</param>
        </member>
        <member name="M:Ezenity_Backend.Controllers.EmailTemplatesController.CreateAsync(Ezenity_Backend.Models.EmailTemplates.CreateEmailTemplateRequest)">
            <summary>
            Asynchronously creates a new email template.
            </summary>
            <param name="model">The email template creation model.</param>
            <returns>An action result containing the created email template.</returns>
        </member>
        <member name="M:Ezenity_Backend.Controllers.EmailTemplatesController.CreateAsyncTest(Ezenity_Backend.Models.EmailTemplates.CreateEmailTemplateRequest)">
            <summary>
            Asynchronously creates a new email template
             - This is a test method which requires no Authentication.
            </summary>
            <param name="model">The email template creation model.</param>
            <returns>An action result containing the created email template.</returns>
        </member>
        <member name="M:Ezenity_Backend.Controllers.EmailTemplatesController.DeleteAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously deletes an existing email template.
            </summary>
            <param name="DeleteEmailTemplateId">The ID of the email template to delete.</param>
            <param name="DeletedById">The ID of the user performing the deletion.</param>
            <returns>An action result containing information about the deletion.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the email template is not found.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AuthorizationException">Thrown when the user is unauthorized to perform this action.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.DeletionFailedException">Thrown when the deletion operation fails.</exception>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.EmailTemplatesController.GetAllAsync(System.String,System.String)">
            <summary>
            Asynchronously fetches all email templates.
            </summary>
            <returns>An action result containing a list of email templates.</returns>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.EmailTemplatesController.GetByIdAsync(System.Int32)">
            <summary>
            Asynchronously fetches an email template by its ID.
            </summary>
            <param name="id">The ID of the email template to fetch.</param>
            <returns>An action result containing the fetched email template.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the email template is not found.</exception>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.EmailTemplatesController.GetNonDynamicByIdAsync(System.Int32)">
            <summary>
            Retrieves a non-dynamic email template by its ID asynchronously.
            </summary>
            <param name="id">The ID of the email template.</param>
            <returns>An API response containing the requested email template.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown if the email template does not exist.</exception>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.EmailTemplatesController.UpdateAsync(System.Int32,Ezenity_Backend.Models.EmailTemplates.UpdateEmailTemplateRequest)">
            <summary>
            Asynchronously updates an existing email template.
            </summary>
            <param name="id">The ID of the email template to update.</param>
            <param name="model">The email template update model.</param>
            <returns>An action result containing the updated email template.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the email template is not found.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AuthorizationException">Thrown when the user is unauthorized to perform this action.</exception>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs.</exception>
        </member>
        <member name="T:Ezenity_Backend.Controllers.OperationsController">
            <summary>
            Provides an API controller for system operations like reloading configurations.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Controllers.OperationsController._config">
            <summary>
            Represents the application's current configuration as a set of key-value pairs.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Controllers.OperationsController.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Controllers.OperationsController"/> class.
            </summary>
            <param name="config">The application's current configuration.</param>
        </member>
        <member name="M:Ezenity_Backend.Controllers.OperationsController.ReloadConfig">
            <summary>
            Reloads the application's configuration settings from all registered providers.
            </summary>
            <returns>
            A status code representing the result of the operation.
            - Ok (HTTP 200) if the operation succeeds.
            - Internal Server Error (HTTP 500) if an exception occurs.
            </returns>
            <remarks>
            Make an HTTP OPTIONS request to this endpoint to reload the application's configuration.
            </remarks>
            <exception cref="T:System.Exception">Thrown when an error occurs during configuration reload.</exception>
        </member>
        <member name="T:Ezenity_Backend.Controllers.RolesController">
            <summary>
            Handles API operations related to roles within the system.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Controllers.SectionsController">
            <summary>
            Provides an API controller for managing sections.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Controllers.SectionsController._sectionService">
            <summary>
            Service to handle section-related business logic.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Controllers.SectionsController._accountService">
            <summary>
            Service to handle account-related business logic.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Controllers.SectionsController._logger">
            <summary>
            Logger for capturing runtime information.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Controllers.SectionsController.#ctor(Ezenity_Backend.Services.Common.ISectionService,Ezenity_Backend.Services.Common.IAccountService,Microsoft.Extensions.Logging.ILogger{Ezenity_Backend.Controllers.SectionsController})">
            <summary>
            Initializes a new instance of the SectionsController class.
            </summary>
            <param name="sectionService">Service for section-related business logic.</param>
            <param name="accountService">Service for account-related business logic.</param>
            <param name="logger">Logger instance for capturing runtime logs.</param>
        </member>
        <member name="M:Ezenity_Backend.Controllers.SectionsController.GetByIdAsync(System.Int32)">
            <summary>
            Fetches a section by its ID asynchronously.
            </summary>
            <param name="id">The ID of the section to fetch.</param>
            <returns>A wrapped API response containing the section data or errors.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the requested section is not found.</exception>
            <exception cref="T:System.Exception">Thrown for generic server errors.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.SectionsController.GetAllAsync(System.String,System.String)">
            <summary>
            Fetches all sections asynchronously.
            </summary>
            <returns>A wrapped API response containing the list of sections or errors.</returns>
            <exception cref="T:System.Exception">Thrown for generic server errors.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.SectionsController.CreateAsync(Ezenity_Backend.Models.Sections.CreateSectionRequest)">
            <summary>
            Creates a new section based on the provided request model.
            </summary>
            <param name="model">The request model containing the data to create a new section.</param>
            <returns>A wrapped API response containing the created section or errors.</returns>
            <exception cref="T:System.Exception">Thrown for generic server errors.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.SectionsController.CreateWithAdditionalAsync(Ezenity_Backend.Models.Sections.CreateSectionWithAdditonalRequest)">
            <summary>
            Creates a new section with additional properties asynchronously.
            </summary>
            <param name="model">The model containing data for the new section.</param>
            <returns>An API response containing the created section.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AppException">Thrown if the section title already exists.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.SectionsController.UpdateAsync(System.Int32,Ezenity_Backend.Models.Sections.UpdateSectionRequest)">
            <summary>
            Updates an existing section based on the provided ID and request model.
            </summary>
            <param name="id">The ID of the section to update.</param>
            <param name="model">The request model containing the data to update the section.</param>
            <returns>A wrapped API response containing the updated section or errors.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the requested section is not found.</exception>
            <exception cref="T:System.Exception">Thrown for generic server errors.</exception>
        </member>
        <member name="M:Ezenity_Backend.Controllers.SectionsController.DeleteAsync(System.Int32,System.Int32)">
            <summary>
            Deletes an existing section based on the provided ID and the ID of the user performing the deletion.
            </summary>
            <param name="DeleteSectionId">The ID of the section to delete.</param>
            <param name="DeletedById">The ID of the user performing the deletion.</param>
            <returns>A wrapped API response containing the deletion status or errors.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the requested section or user is not found.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AuthorizationException">Thrown when the user is not authorized to perform the deletion.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.DeletionFailedException">Thrown when deletion fails due to server or validation errors.</exception>
            <exception cref="T:System.Exception">Thrown for generic server errors.</exception>
        </member>
        <member name="T:Ezenity_Backend.Entities.Accounts.Account">
            <summary>
            Represents an account in the system.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.Id">
            <summary>
            Gets or sets the account ID.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.Title">
            <summary>
            Gets the account title. Cannot be null after the object is constructed.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.FirstName">
            <summary>
            Gets the first name of the account holder. Cannot be null after the object is constructed.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.LastName">
            <summary>
            Gets the last name of the account holder. Cannot be null after the object is constructed.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.Email">
            <summary>
            Gets the email of the account holder. Cannot be null after the object is constructed.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.PasswordHash">
            <summary>
            Gets or sets the hashed password for the account.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.AcceptTerms">
            <summary>
            Gets or sets a value indicating whether the terms are accepted.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.RoleId">
            <summary>
            Gets or sets the Role Foreign Key
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.Role">
            <summary>
            Gets or sets the role of the account holder; used for navigation
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.VerificationToken">
            <summary>
            Gets or sets the verification token for the account.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.Verified">
            <summary>
            Gets or sets the date and time the account was verified.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.IsVerified">
            <summary>
            Gets a value indicating whether the account is verified.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.ResetToken">
            <summary>
            Gets or sets the reset token for the account.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.ResetTokenExpires">
            <summary>
            Gets or sets the expiration date for the reset token.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.PasswordReset">
            <summary>
            Gets or sets the date and time the password was reset.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.Created">
            <summary>
            Gets or sets the date and time the account was created.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.Updated">
            <summary>
            Gets or sets the date and time the account was last updated.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Account.RefreshTokens">
            <summary>
            Gets or sets the refresh tokens for the account.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Entities.Accounts.Account.OwnsToken(System.String)">
            <summary>
            Checks if the account owns a specific token.
            </summary>
            <param name="token">The token to check ownership of.</param>
            <returns>true if the account owns the token, false otherwise.</returns>
        </member>
        <member name="M:Ezenity_Backend.Entities.Accounts.Account.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Entities.Accounts.Account"/> class.
            Validates that Title, FirstName, LastName, and Email are not null.
            Throws an ArgumentNullException for any null arguments.
            </summary>
            <param name="title">The title of the account holder.</param>
            <param name="firstName">The first name of the account holder.</param>
            <param name="lastName">The last name of the account holder.</param>
            <param name="email">The email of the account holder.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
        </member>
        <member name="T:Ezenity_Backend.Entities.Accounts.RefreshToken">
            <summary>
            Represents a refresh token for an account.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.RefreshToken.Id">
            <summary>
            Gets or sets the ID of the refresh token.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.RefreshToken.AccountId">
            <summary>
            Gets or sets the Foreign key relationship with <see cref="P:Ezenity_Backend.Entities.Accounts.RefreshToken.Account"/> entity
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.RefreshToken.Account">
            <summary>
            Gets or sets the account associated with this refresh token for navigation
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.RefreshToken.Token">
            <summary>
            Gets or sets the token string.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.RefreshToken.Expires">
            <summary>
            Gets or sets the expiration date and time of the token.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.RefreshToken.IsExpired">
            <summary>
            Gets a value indicating whether the token is expired.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.RefreshToken.Created">
            <summary>
            Gets or sets the date and time the token was created.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.RefreshToken.CreatedByIp">
            <summary>
            Gets or sets the IP address that created the token.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.RefreshToken.Revoked">
            <summary>
            Gets or sets the date and time the token was revoked.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.RefreshToken.RevokedByIp">
            <summary>
            Gets or sets the IP address that revoked the token.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.RefreshToken.ReplacedByToken">
            <summary>
            Gets or sets the token that replaced this one.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.RefreshToken.IsActive">
            <summary>
            Gets a value indicating whether the token is active.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Entities.Accounts.Role">
            <summary>
            Represents a role in the system.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Role.Id">
            <summary>
            Gets or sets the role ID.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Role.Name">
            <summary>
            Gets or sets the name of the role.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Accounts.Role.Accounts">
            <summary>
            Gets or sets the asociated accounts with the specified Role
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Entities.Emails.EmailMessage">
            <summary>
            Represents an email message to be sent.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Emails.EmailMessage.To">
            <summary>
            Gets or sets the recipient email address.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Emails.EmailMessage.Subject">
            <summary>
            Gets or sets the subject of the email.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Emails.EmailMessage.TemplateName">
            <summary>
            Gets or sets the name of the template to use for this email.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Emails.EmailMessage.DynamicValues">
            <summary>
            Gets or sets the dynamic values to be substituted in the email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Emails.EmailMessage.From">
            <summary>
            Gets or sets the sender's email address.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate">
            <summary>
            Represents an email template in the system.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.Id">
            <summary>
            Gets or sets the template ID.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.TemplateName">
            <summary>
            Gets or sets the name of the template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.Subject">
            <summary>
            Gets or sets the subject line for the email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.Content">
            <summary>
            Gets or sets the content of the email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.IsDefault">
            <summary>
            Gets or sets a value indicating whether the template is the default one.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.CreatedAt">
            <summary>
            Gets or sets the creation timestamp of the email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.UpdatedAt">
            <summary>
            Gets or sets the last update timestamp of the email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.IsActive">
            <summary>
            Gets a value indicating whether the template is currently active.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.StartDate">
            <summary>
            Gets or sets the start date for when the template is considered active.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.EndDate">
            <summary>
            Gets or sets the end date for when the template is considered inactive.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.IsDynamic">
            <summary>
            Gets or sets a value indicating whether the template supports dynamic content.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.PlaceholderValues">
            <summary>
            Gets or sets the placeholder values and their corresponding replacements.
            This property is not mapped to the database.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.PlaceholderValuesJson">
            <summary>
            Gets or sets the JSON serialized placeholder values for the template.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Entities.EmailTemplates.EmailTemplate.ApplyDynamicContent">
            <summary>
            Applies dynamic content to the template by replacing placeholders with their corresponding values.
            </summary>
            <returns>The content of the template with placeholders replaced.</returns>
        </member>
        <member name="T:Ezenity_Backend.Entities.Sections.Section">
            <summary>
            Represents a section in the system, typically a part of a page or component.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Sections.Section.Id">
            <summary>
            Gets or sets the unique identifier for the section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Sections.Section.Title">
            <summary>
            Gets or sets the title of the section.
            Required. Maximum length is 100 characters.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Sections.Section.ContentType">
            <summary>
            Gets or sets the type of content that the section holds.
            This could be text, HTML, markdown, etc.
            Required.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Sections.Section.Content">
            <summary>
            Gets or sets the actual content of the section.
            Required.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Sections.Section.Layout">
            <summary>
            Gets or sets the layout type or template that the section uses.
            This is optional and could be used for custom rendering.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Sections.Section.Created">
            <summary>
            Gets or sets the date and time when the section was created.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Sections.Section.Updated">
            <summary>
            Gets or sets the date and time when the section was last updated.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Sections.Section.IsActive">
            <summary>
            Gets or sets the visibility control
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Sections.Section.AccessLevel">
            <summary>
            Gets or sets who can see the section
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Sections.Section.ParentSectionId">
            <summary>
            Get or set the ID for nested sections
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Entities.Sections.Section.MetaTags">
            <summary>
            Get or set the SEO meta tags that could be applied to the section
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Filters.ApiExceptionFilter">
            <summary>
            Provides global exception handling for API responses by capturing any thrown exceptions
            and converting them into a standardized JSON response format.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Filters.ApiExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Called when an exception occurs in the application. Overrides the base method to provide
            a custom response in case of an exception.
            </summary>
            <param name="context">
            The <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext"/> encapsulating the exception details and other 
            contextual information.
            </param>
        </member>
        <member name="T:Ezenity_Backend.Filters.CreateEmailTemplateFilter">
            <summary>
            Operation filter for modifying Swagger documentation related to the 'CreateEmailTemplate' operation.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Filters.CreateEmailTemplateFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies modifications to the OpenAPI operation for the 'CreateEmailTemplate' endpoint.
            </summary>
            <param name="operation">The OpenAPI operation object.</param>
            <param name="context">Context that provides schema and other information.</param>
        </member>
        <member name="T:Ezenity_Backend.Filters.CreateSectionFilter">
            <summary>
            Operation filter for modifying Swagger documentation related to the 'CreateSection' operation.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Filters.CreateSectionFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies modifications to the OpenAPI operation for the 'CreateSection' endpoint.
            </summary>
            <param name="operation">The OpenAPI operation object.</param>
            <param name="context">Context that provides schema and other information.</param>
        </member>
        <member name="T:Ezenity_Backend.Filters.GetEmailTemplateFilter">
            <summary>
            Operation filter for modifying Swagger documentation related to the 'GetEmailTemplate' operation.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Filters.GetEmailTemplateFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies modifications to the OpenAPI operation for the 'GetEmailTemplate' endpoint.
            </summary>
            <param name="operation">The OpenAPI operation object.</param>
            <param name="context">Context that provides schema and other information.</param>
        </member>
        <member name="T:Ezenity_Backend.Filters.LoadAccountFilter">
            <summary>
            Represents a filter that loads an account from the database based on the "Account" HTTP header.
            This class implements the <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter"/> interface.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Filters.LoadAccountFilter._context">
            <summary>
            The database context used for retrieving the account data.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Filters.LoadAccountFilter.#ctor(Ezenity_Backend.Helpers.DataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Filters.LoadAccountFilter"/> class.
            </summary>
            <param name="context">The database context.</param>
        </member>
        <member name="M:Ezenity_Backend.Filters.LoadAccountFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            Executes the action filter asynchronously.
            </summary>
            <param name="context">The context for the action, including the HTTP context and action arguments.</param>
            <param name="next">The delegate for executing the next stage in the filter pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
            <remarks>
            This method tries to parse the "Account" HTTP header into an integer (account ID),
            and then queries the database for the corresponding account. If the account exists,
            it is stored in the HttpContext.Items dictionary for later use.
            </remarks>
        </member>
        <member name="T:Ezenity_Backend.Filters.UpdateAccountFilter">
            <summary>
            Operation filter for modifying Swagger documentation related to the 'CreateSection' operation.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Filters.UpdateAccountFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies modifications to the OpenAPI operation for the 'UpdateAccount' endpoint.
            </summary>
            <param name="operation">The OpenAPI operation object.</param>
            <param name="context">Context that provides schema and other information.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.AppSettings">
            <summary>
            Contains settings for the application.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.AppSettings.BaseUrl">
            <summary>
            Gets or sets the base URL of the application.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.AppSettings.Secret">
            <summary>
            Gets or sets the secret used for cryptographic operations.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.AppSettings.RefreshTokenTTL">
            <summary>
            Gets or sets the Time-To-Live (TTL) for refresh tokens (in days).
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.AppSettings.EmailFrom">
            <summary>
            Gets or sets the email address that will be used as the 'From' address in outgoing emails.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.AppSettings.SmtpHost">
            <summary>
            Gets or sets the host name for the SMTP server used for sending emails.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.AppSettings.SmtpPort">
            <summary>
            Gets or sets the port number for the SMTP server.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.AppSettings.SmtpUser">
            <summary>
            Gets or sets the username for authentication with the SMTP server.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.AppSettings.SmtpPass">
            <summary>
            Gets or sets the password for authentication with the SMTP server.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.AppSettings.SmtpEnableSsl">
            <summary>
            Gets or sets a value indicating whether SSL is enabled for SMTP communications.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.AppSettings.AccessToken">
            <summary>
            Gets or sets the access token used for some third-party services or internal processes.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Helpers.AutoMapperProfile">
            <summary>
            Defines the AutoMapper profiles for mapping between entity and model objects.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.AutoMapperProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.AutoMapperProfile"/> class and configures object mappings.
            Mappings between model and entity objects
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Helpers.DataContext">
            <summary>
            Represents the Entity Framework Core database context for the application.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.DataContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Ezenity_Backend.Helpers.DataContext})">
            <summary>
            Initializes a new instance of the "DataContext" class.
            </summary>
            <param name="options">The options for this context.</param>
        </member>
        <member name="P:Ezenity_Backend.Helpers.DataContext.Accounts">
            <summary>
            Gets or sets the accounts available in the database.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.DataContext.Roles">
            <summary>
            Gets or sets the roles available in the database.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.DataContext.EmailTemplates">
            <summary>
            Gets or sets the email templates available in the database.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Helpers.DataContext.Sections">
            <summary>
            Gets or sets the sections available in the database.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.DataContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Overrides the OnModelCreating method to configure the entity relationships and table schema in the database.
            </summary>
            <param name="modelBuilder">The model builder used by Entity Framework Core to configure the entity relationships and schema.</param>
            <remarks>
            This method does the following:
            - Calls the ConfigureAccounts method to set up the Accounts table.
            - Calls the ConfigureRefreshtoken method to set up the RefreshTokens table.
            - Calls the ConfigureRoles method to set up the Roles table.
            - Calls the ConfigureEmailTemplates method to set up the EmailTemplates table.
            - Calls the ConfigureSections method to set up the Sections table.
            - Additional relationships between entities can be added as necessary.
            </remarks>
        </member>
        <member name="M:Ezenity_Backend.Helpers.DataContext.ConfigureAccounts(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the schema for the Accounts table in the database.
            This method sets up various properties and relationships for the Account entity.
            </summary>
            <param name="modelBuilder">The model builder used by Entity Framework Core to configure the entity.</param>
            <remarks>
            - Sets the primary key for the Accounts table as 'Id'.
            - Establishes a many-to-one relationship between the Account and Role entities.
              Each Account has one Role, while a Role can be associated with multiple Accounts.
              The relationship is enforced by a foreign key 'RoleId' in the Account entity.
            </remarks>
        </member>
        <member name="M:Ezenity_Backend.Helpers.DataContext.ConfigureRefreshtoken(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the schema for the RefreshTokens table in the database.
            This method sets up various properties, their requirements, and establishes the relationship
            between the RefreshToken entity and the Account entity.
            </summary>
            <param name="modelBuilder">The model builder used by Entity Framework Core to configure the entity.</param>
            <remarks>
            - Sets the primary key for the RefreshTokens table as 'Id'.
            - Sets the 'Token', 'Expires', and 'Created' properties to be required.
            - Makes 'CreatedByIp', 'Revoked', 'RevokedByIp', and 'ReplacedByToken' as optional fields.
            - Establishes a one-to-many relationship between the Account entity and RefreshToken entity. 
              Each Account can have multiple RefreshTokens, and each RefreshToken is linked back to an Account
              via a foreign key 'AccountId'.
            </remarks>
        </member>
        <member name="M:Ezenity_Backend.Helpers.DataContext.ConfigureRoles(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the schema for the Roles table in the database.
            This method sets up various properties and establishes relationships
            between the Role entity and the Account entity.
            </summary>
            <param name="modelBuilder">The model builder used by Entity Framework Core to configure the entity.</param>
            <remarks>
            - Sets the primary key for the Roles table as 'Id'.
            - Establishes a one-to-many relationship between the Role entity and the Account entity.
              Each Role can be associated with multiple Accounts, and each Account has a Role.
              The relationship is enforced by a foreign key 'RoleId' in the Account entity.
            </remarks>
        </member>
        <member name="M:Ezenity_Backend.Helpers.DataContext.ConfigureEmailTemplates(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the schema for the EmailTemplates table in the database.
            This method sets the primary key for the EmailTemplate entity.
            </summary>
            <param name="modelBuilder">The model builder used by Entity Framework Core to configure the entity.</param>
            <remarks>
            - Sets the primary key for the EmailTemplates table as 'Id'.
            </remarks>
        </member>
        <member name="M:Ezenity_Backend.Helpers.DataContext.ConfigureSections(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the schema for the Sections table in the database.
            This method sets the primary key for the Section entity.
            </summary>
            <param name="modelBuilder">The model builder used by Entity Framework Core to configure the entity.</param>
            <remarks>
            - Sets the primary key for the Sections table as 'Id'.
            </remarks>
        </member>
        <member name="T:Ezenity_Backend.Helpers.EmailHelpers">
            <summary>
            Provides utility methods for handling and validating emails.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.EmailHelpers.IsValidEmail(System.String)">
            <summary>
            Validates the provided email string.
            </summary>
            <param name="email">The email string to validate.</param>
            <returns>true if the email is valid, otherwise false.</returns>
        </member>
        <member name="M:Ezenity_Backend.Helpers.EmailHelpers.ExtractEmailAddress(System.String)">
            <summary>
            Extracts email addresses from the provided input string.
            </summary>
            <param name="input">Input string potentially containing an email.</param>
            <returns>The email address if found; otherwise, an empty string.</returns>
        </member>
        <member name="M:Ezenity_Backend.Helpers.EmailHelpers.CommaSeparatedEmails(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts an IEnumerable of email strings to a single comma-separated string.
            </summary>
            <param name="emailList">IEnumerable of email strings.</param>
            <returns>A comma-separated string of emails.</returns>
        </member>
        <member name="M:Ezenity_Backend.Helpers.EmailHelpers.GetEmailTemplateByName(System.String,Ezenity_Backend.Helpers.DataContext)">
            <summary>
            Retrieves an email template by its name from the database context.
            </summary>
            <param name="templateName">Name of the template.</param>
            <param name="context">The data context.</param>
            <returns>The EmailTemplate object if found; otherwise, null.</returns>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.AppException">
            <summary>
            Represents a custom exception for handling application-specific issues, such as validation errors.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.AppException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.AppException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.AppException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.AppException"/> class with a specific error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.AppException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.AppException"/> class with a formatted error message.
            </summary>
            <param name="message">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <paramref name="args"/> array.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.AuthenticationException">
            <summary>
            Exception for capturing authentication-related issues, such as invalid credentials.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.AuthenticationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.AuthenticationException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.AuthenticationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.AuthenticationException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.AuthenticationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.AuthenticationException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.AuthorizationException">
            <summary>
            Exception for capturing authorization failures, such as insufficient permissions.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.AuthorizationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.AuthorizationException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.AuthorizationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.AuthorizationException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.AuthorizationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.AuthorizationException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.BusinessRuleException">
            <summary>
            Exception for capturing specific business rule or domain constraint violations.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.BusinessRuleException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.BusinessRuleException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.BusinessRuleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.BusinessRuleException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.BusinessRuleException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.BusinessRuleException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.ConcurrencyException">
            <summary>
            Exception for capturing issues related to concurrent access to shared resources.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.ConcurrencyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.ConcurrencyException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.ConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.ConcurrencyException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.ConcurrencyException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.ConcurrencyException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.DataAccessException">
            <summary>
            Exception for capturing lower-level, unrecoverable errors when interacting with data storage.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.DataAccessException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.DataAccessException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.DataAccessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.DataAccessException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.DataAccessException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.DataAccessException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string that contains text intermixed with zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.DeletionFailedException">
            <summary>
            Exception for indicating that a deletion operation has failed.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.DeletionFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.DeletionFailedException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.DeletionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.DeletionFailedException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.DeletionFailedException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.DeletionFailedException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string that contains text intermixed with zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.DependencyFailureException">
            <summary>
            Exception for capturing failures due to external services or components being unavailable or failing.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.DependencyFailureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.DependencyFailureException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.DependencyFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.DependencyFailureException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.DependencyFailureException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.DependencyFailureException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string that contains text intermixed with zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.InvalidVerificationTokenException">
            <summary>
            Exception specifically for capturing issues related to invalid or expired verification tokens.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.InvalidVerificationTokenException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.InvalidVerificationTokenException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.InvalidVerificationTokenException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.InvalidVerificationTokenException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.InvalidVerificationTokenException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.InvalidVerificationTokenException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string that contains text intermixed with zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.NotFoundException">
            <summary>
            General exception for not finding a resource, whether it's a data record or file.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.NotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.NotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.NotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.NotFoundException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.NotFoundException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.NotFoundException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string that contains text intermixed with zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.RateLimitExceededException">
            <summary>
            Exception for capturing API rate-limiting issues, useful for limiting resource usage.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.RateLimitExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.RateLimitExceededException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.RateLimitExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.RateLimitExceededException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.RateLimitExceededException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.RateLimitExceededException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string that contains text intermixed with zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.ResourceAlreadyExistsException">
            <summary>
            Exception for capturing situations where a resource already exists when trying to create a new one.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.ResourceAlreadyExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceAlreadyExistsException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.ResourceAlreadyExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceAlreadyExistsException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.ResourceAlreadyExistsException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceAlreadyExistsException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">
            <summary>
            Exception for indicating that a requested resource could not be found.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.Exceptions.ValidationException">
            <summary>
            Exception for capturing validation errors in models and business logic.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.ValidationException"/> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.ValidationException"/> class with a specific message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.Exceptions.ValidationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Helpers.Exceptions.ValidationException"/> class with a formatted message.
            </summary>
            <param name="message">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
        </member>
        <member name="T:Ezenity_Backend.Helpers.TokenHelper">
            <summary>
            Provides functionalities for handling JWT and refresh tokens.
            
            One instance of 'TokenHelper' per HTTP request. This will ensure
            that it is working with a consistent set of data within a single 
            request. This will also keep some state consistent throughout
            the single request lifecycle but will not keep the state longer
            than that.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Helpers.TokenHelper._context">
            <summary>
            Data context for database interaction.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Helpers.TokenHelper._appSettings">
            <summary>
            Application-specific settings.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Helpers.TokenHelper._secret">
            <summary>
            Secret key for token generation.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Helpers.TokenHelper.#ctor(Ezenity_Backend.Helpers.DataContext,Microsoft.Extensions.Options.IOptions{Ezenity_Backend.Helpers.AppSettings},System.String)">
            <summary>
            Initializes a new instance of the TokenHelper class with DataContext, AppSettings, and secret string.
            </summary>
            <param name="context">The data context for database interaction.</param>
            <param name="appSettings">Application-specific settings.</param>
            <param name="secret">Secret key for token generation.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.TokenHelper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TokenHelper class with only a secret string.
            </summary>
            <param name="secret">Secret key for token generation.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.TokenHelper.GenerateJwtToken(System.Int32)">
            <summary>
            Generates a JWT token for a given account ID.
            </summary>
            <param name="accountId">The account ID for which to generate the token.</param>
            <returns>The JWT token as a string.</returns>
        </member>
        <member name="M:Ezenity_Backend.Helpers.TokenHelper.GenerateNewRefreshToken(System.String)">
            <summary>
            Generates a new refresh token.
            </summary>
            <param name="ipAddress">The originating IP address.</param>
            <returns>A new RefreshToken object.</returns>
        </member>
        <member name="M:Ezenity_Backend.Helpers.TokenHelper.UpdateRefreshToken(Ezenity_Backend.Entities.Accounts.RefreshToken,Ezenity_Backend.Entities.Accounts.RefreshToken,System.String)">
            <summary>
            Updates the given refresh token with revocation information and adds a new refresh token to the associated account.
            </summary>
            <param name="refreshToken">The refresh token to revoke.</param>
            <param name="newRefreshToken">The new refresh token to add.</param>
            <param name="ipAddress">The IP address initiating the request.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.TokenHelper.RemoveOldRefreshTokens(Ezenity_Backend.Entities.Accounts.Account)">
            <summary>
            Removes old or expired refresh tokens from an account.
            </summary>
            <param name="account">The account for which to remove old refresh tokens.</param>
        </member>
        <member name="M:Ezenity_Backend.Helpers.TokenHelper.GetRefreshTokenAsync(System.String)">
            <summary>
            Retrieves the refresh token and associated account for the given token string.
            </summary>
            <param name="token">The token string to search for.</param>
            <returns>A tuple containing the refresh token and associated account.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AppException">Thrown if the token is invalid or inactive.</exception>
        </member>
        <member name="M:Ezenity_Backend.Helpers.TokenHelper.RandomTokenString">
            <summary>
            Generates a random token string.
            </summary>
            <returns>The generated token string.</returns>
        </member>
        <member name="T:Ezenity_Backend.Middleware.CustomJwtAuthenticationHandler">
            <summary>
            Custom authentication handler for handling JSON Web Tokens (JWT).
            </summary>
            <remarks>
            This class extends the <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationHandler`1"/> to provide custom JWT authentication.
            It validates the JWT token from the "Authorization" header and sets the user principal accordingly.
            </remarks>
        </member>
        <member name="F:Ezenity_Backend.Middleware.CustomJwtAuthenticationHandler._appSettings">
            <summary>
            Application settings for configuring JWT.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Middleware.CustomJwtAuthenticationHandler.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions},Microsoft.Extensions.Options.IOptions{Ezenity_Backend.Helpers.AppSettings},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.UrlEncoder,Microsoft.AspNetCore.Authentication.ISystemClock,Ezenity_Backend.Helpers.DataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Middleware.CustomJwtAuthenticationHandler"/> class.
            </summary>
            <param name="options">The options monitor for the authentication scheme options.</param>
            <param name="appSettings">The application settings for JWT.</param>
            <param name="logger">The logger factory.</param>
            <param name="encoder">The URL encoder.</param>
            <param name="clock">The system clock.</param>
            <param name="context">The data context for database operations.</param>
        </member>
        <member name="M:Ezenity_Backend.Middleware.CustomJwtAuthenticationHandler.HandleAuthenticateAsync">
            <summary>
            Handles the authentication asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticateResult"/>.</returns>
            <remarks>
            This method attempts to authenticate the user by validating the JWT token from the "Authorization" header.
            If the token is valid, it sets the user principal accordingly and returns a successful authentication result.
            </remarks>
        </member>
        <member name="T:Ezenity_Backend.Middleware.ErrorHandlerMiddleware">
            <summary>
            Middleware for handling exceptions and converting them into appropriate HTTP responses.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Middleware.ErrorHandlerMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{Ezenity_Backend.Middleware.ErrorHandlerMiddleware})">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Middleware.ErrorHandlerMiddleware"/> class.
            </summary>
            <param name="next">The delegate for the next middleware in the pipeline.</param>
            <param name="logger">The logger to write diagnostic messages to.</param>
        </member>
        <member name="M:Ezenity_Backend.Middleware.ErrorHandlerMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware.
            </summary>
            <param name="context">The HTTP context for the current request and response.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Ezenity_Backend.Middleware.JwtMiddleware">
            <summary>
            Middleware for handling JSON Web Tokens (JWT) in the system.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Middleware.JwtMiddleware._next">
            <summary>
            The delegate for the next middleware in the pipeline.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Middleware.JwtMiddleware._appSettings">
            <summary>
            Application settings for configuring JWT.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Middleware.JwtMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Ezenity_Backend.Helpers.AppSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Middleware.JwtMiddleware"/> class.
            </summary>
            <param name="next">The delegate for the next middleware in the pipeline.</param>
            <param name="appSettings">Application settings for configuring JWT.</param>
        </member>
        <member name="M:Ezenity_Backend.Middleware.JwtMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext,Ezenity_Backend.Helpers.DataContext)">
            <summary>
            Invokes the middleware.
            </summary>
            <param name="context">The HTTP context for the current request and response.</param>
            <param name="dataContext">The database context to query for accounts.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ezenity_Backend.Middleware.JwtMiddleware.attachAccountToContext(Microsoft.AspNetCore.Http.HttpContext,Ezenity_Backend.Helpers.DataContext,System.String)">
            <summary>
            Attaches the account associated with a valid JWT to the HTTP context.
            </summary>
            <param name="context">The HTTP context for the current request and response.</param>
            <param name="dataContext">The database context to query for accounts.</param>
            <param name="token">The JWT to validate and extract account information from.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Ezenity_Backend.Models.Accounts.AccountResponse">
            <summary>
            Represents the response payload for account-related actions, providing details about the account.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AccountResponse.Id">
            <summary>
            Gets or sets the unique identifier for the account.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AccountResponse.Title">
            <summary>
            Gets or sets the title for the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AccountResponse.FirstName">
            <summary>
            Gets or sets the first name of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AccountResponse.LastName">
            <summary>
            Gets or sets the last name of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AccountResponse.Email">
            <summary>
            Gets or sets the email of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AccountResponse.Role">
            <summary>
            Gets or sets the role of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AccountResponse.Created">
            <summary>
            Gets or sets the date the account was created.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AccountResponse.Updated">
            <summary>
            Gets or sets the date the account was last updated. Null if never updated.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AccountResponse.IsVerified">
            <summary>
            Gets or sets a value indicating whether the email is verified.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Accounts.AuthenticateRequest">
            <summary>
            Represents the request payload needed for authentication.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateRequest.Email">
            <summary>
            Gets or sets the email for authentication.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateRequest.Password">
            <summary>
            Gets or sets the password for authentication.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Accounts.AuthenticateResponse">
            <summary>
            Represents the response payload for successful authentication.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateResponse.Id">
            <summary>
            Gets or sets the unique identifier for the account.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateResponse.Title">
            <summary>
            Gets or sets the title for the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateResponse.FirstName">
            <summary>
            Gets or sets the first name of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateResponse.LastName">
            <summary>
            Gets or sets the last name of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateResponse.Email">
            <summary>
            Gets or sets the email of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateResponse.Role">
            <summary>
            Gets or sets the role of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateResponse.Created">
            <summary>
            Gets or sets the date when the account was created.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateResponse.Updated">
            <summary>
            Gets or sets the date when the account was last updated. Null if never updated.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateResponse.IsVerified">
            <summary>
            Gets or sets a value indicating whether the account's email has been verified.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateResponse.JwtToken">
            <summary>
            Gets or sets the JSON Web Token (JWT) for authenticated sessions.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.AuthenticateResponse.RefreshToken">
            <summary>
            Gets or sets the refresh token. This property will not be serialized.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Accounts.CreateAccountRequest">
            <summary>
            Represents the request payload for creating a new account.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.CreateAccountRequest.Title">
            <summary>
            Gets or sets the title for the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.CreateAccountRequest.FirstName">
            <summary>
            Gets or sets the first name of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.CreateAccountRequest.LastName">
            <summary>
            Gets or sets the last name of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.CreateAccountRequest.Email">
            <summary>
            Gets or sets the email of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.CreateAccountRequest.Role">
            <summary>
            Gets or sets the role of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.CreateAccountRequest.Password">
            <summary>
            Gets or sets the password for the new account.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.CreateAccountRequest.ConfirmPassword">
            <summary>
            Gets or sets the confirmation password for the new account. Should match Password.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Accounts.ForgotPasswordRequest">
            <summary>
            Represents the request payload for initiating a password reset operation.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.ForgotPasswordRequest.Email">
            <summary>
            Gets or sets the email of the account for which the password is forgotten.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Accounts.RegisterRequest">
            <summary>
            Represents the request payload for account registration.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.RegisterRequest.Title">
            <summary>
            Gets or sets the title for the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.RegisterRequest.FirstName">
            <summary>
            Gets or sets the first name of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.RegisterRequest.LastName">
            <summary>
            Gets or sets the last name of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.RegisterRequest.Email">
            <summary>
            Gets or sets the email of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.RegisterRequest.Password">
            <summary>
            Gets or sets the role of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.RegisterRequest.ConfirmPassword">
            <summary>
            Gets or sets the confirmation password for the new account. Should match Password.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.RegisterRequest.AcceptTerms">
            <summary>
            Gets or sets a value indicating whether the user accepts the terms and conditions.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Accounts.ResetPasswordRequest">
            <summary>
            Represents the request payload for resetting the account password.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.ResetPasswordRequest.Token">
            <summary>
            Gets or sets the verification token.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.ResetPasswordRequest.Password">
            <summary>
            Gets or sets the role of the account holder.
            </summary> 
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.ResetPasswordRequest.ConfirmPassword">
            <summary>
            Gets or sets the confirmation password for the account. Should match Password.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Accounts.RevokeTokenRequest">
            <summary>
            Represents the request payload for revoking an authentication token.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.RevokeTokenRequest.Token">
            <summary>
            Gets or sets the token that is to be revoked.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Accounts.UpdateAccountRequest">
            <summary>
            Represents the request payload for updating an account's information.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.UpdateAccountRequest.Title">
            <summary>
            Gets or sets the title for the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.UpdateAccountRequest.FirstName">
            <summary>
            Gets or sets the first name of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.UpdateAccountRequest.LastName">
            <summary>
            Gets or sets the last name of the account holder.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.UpdateAccountRequest.Role">
            <summary>
            Gets or sets the role ID of the account holder. This field is optional.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.UpdateAccountRequest.Email">
            <summary>
            Gets or sets the email of the account holder. This field is optional.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.UpdateAccountRequest.Password">
            <summary>
            Gets or sets the password of the account holder. This field is optional.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.UpdateAccountRequest.ConfirmPassword">
            <summary>
            Gets or sets the confirmation password of the account holder. Should match the password.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Models.Accounts.UpdateAccountRequest.replaceEmptyWithNull(System.String)">
            <summary>
            Replaces an empty string with null, making the field optional.
            </summary>
            <param name="value">The string value to check.</param>
            <returns>Returns null if the string is empty; otherwise, returns the original string.</returns>
        </member>
        <member name="T:Ezenity_Backend.Models.Accounts.ValidateResetTokenRequest">
            <summary>
            Represents the request payload for validating a reset token.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.ValidateResetTokenRequest.Token">
            <summary>
            Gets or sets the token to be validated.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Accounts.VerifyEmailRequest">
            <summary>
            Represents the request payload for verifying an email.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Accounts.VerifyEmailRequest.Token">
            <summary>
            Gets or sets the verification token.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.ApiResponse`1">
            <summary>
            Represents a standardized API response with a typed data payload.
            </summary>
            <typeparam name="T">The type of the data payload.</typeparam>
        </member>
        <member name="P:Ezenity_Backend.Models.ApiResponse`1.StatusCode">
            <summary>
            Gets or sets the HTTP status code indicating the result of the operation. Conforms to standard HTTP status codes like 200 (OK), 400 (Bad Request), 404 (Not Found), 500 (Internal Server Error), etc.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.ApiResponse`1.Message">
            <summary>
            Gets or sets a human-readable message describing the outcome of the operation. Useful for debugging and logging purposes.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.ApiResponse`1.IsSuccess">
            <summary>
            Gets or sets a value indicating whether the operation was successful. True for success, False for failure.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.ApiResponse`1.Data">
            <summary>
            Gets or sets the actual data payload returned by the API operation. This property can be null if the operation was unsuccessful.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.ApiResponse`1.Errors">
            <summary>
            Gets or sets a list of errors that occurred during the API operation. This list is typically populated when the IsSuccess property is set to false.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Models.ApiResponse`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Models.ApiResponse`1"/> class, setting the Errors list to an empty list.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.DeleteResponse">
            <summary>
            Represents a response containing details about the deletion operation.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.DeleteResponse.Message">
            <summary>
            Gets or sets a human-readable message describing the deletion outcome.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.DeleteResponse.StatusCode">
            <summary>
            Gets or sets the HTTP status code indicating the deletion result.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.DeleteResponse.DeletedAt">
            <summary>
            Gets or sets the UTC time when the resource was deleted.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.DeleteResponse.DeletedBy">
            <summary>
            Gets or sets the account responsible for the deletion.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.DeleteResponse.ResourceId">
            <summary>
            Gets or sets the unique identifier of the deleted resource.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.DeleteResponse.IsSuccess">
            <summary>
            Gets or sets a value indicating the success or failure of the deletion.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.DeleteResponse.Errors">
            <summary>
            Gets or sets a list of errors, if any, that occurred during the deletion.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Models.DeleteResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Models.DeleteResponse"/> class, setting the Errors list to an empty list.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.EmailTemplates.CreateEmailTemplateRequest">
            <summary>
            Represents the request payload for creating a new email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.CreateEmailTemplateRequest.TemplateName">
            <summary>
            Gets or sets the name of the email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.CreateEmailTemplateRequest.Subject">
            <summary>
            Gets or sets the subject line of the email.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.CreateEmailTemplateRequest.Content">
            <summary>
            Gets or sets the content of the email.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.CreateEmailTemplateRequest.IsDefault">
            <summary>
            Indicates if this template is the default template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.CreateEmailTemplateRequest.IsDynamic">
            <summary>
            Indicates if the content of the email is dynamic.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.CreateEmailTemplateRequest.StartDate">
            <summary>
            Gets or sets the start date for using this template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.CreateEmailTemplateRequest.EndDate">
            <summary>
            Gets or sets the end date for using this template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.CreateEmailTemplateRequest.PlaceholderValues">
            <summary>
            Gets or sets the placeholder values in the email template.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.EmailTemplates.EmailTemplateNonDynamicResponse">
            <summary>
            Represents the response payload containing details of an email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateNonDynamicResponse.Id">
            <summary>
            Gets or sets the unique identifier of the email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateNonDynamicResponse.TemplateName">
            <summary>
            Gets or sets the name of the email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateNonDynamicResponse.Subject">
            <summary>
            Gets or sets the subject line of the email.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateNonDynamicResponse.Content">
            <summary>
            Gets or sets the content of the email.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateNonDynamicResponse.IsDefault">
            <summary>
            Indicates if this template is the default template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateNonDynamicResponse.StartDate">
            <summary>
            Gets or sets the start date for using this template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateNonDynamicResponse.EndDate">
            <summary>
            Gets or sets the end date for using this template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateNonDynamicResponse.IsActive">
            <summary>
            Indicates if the email template is currently active.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.EmailTemplates.EmailTemplateResponse">
            <summary>
            Represents the response payload containing details of an email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateResponse.Id">
            <summary>
            Gets or sets the unique identifier of the email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateResponse.TemplateName">
            <summary>
            Gets or sets the name of the email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateResponse.Subject">
            <summary>
            Gets or sets the subject line of the email.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateResponse.Content">
            <summary>
            Gets or sets the content of the email.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateResponse.IsDefault">
            <summary>
            Indicates if this template is the default template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateResponse.IsDynamic">
            <summary>
            Indicates if the content of the email is dynamic.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateResponse.StartDate">
            <summary>
            Gets or sets the start date for using this template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateResponse.EndDate">
            <summary>
            Gets or sets the end date for using this template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.EmailTemplateResponse.IsActive">
            <summary>
            Indicates if the email template is currently active.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.EmailTemplates.UpdateEmailTemplateRequest">
            <summary>
            Represents the request payload for updating an existing email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.UpdateEmailTemplateRequest.TemplateName">
            <summary>
            Gets or sets the name of the email template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.UpdateEmailTemplateRequest.Subject">
            <summary>
            Gets or sets the subject line of the email.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.UpdateEmailTemplateRequest.Content">
            <summary>
            Gets or sets the content of the email.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.UpdateEmailTemplateRequest.IsDefault">
            <summary>
            Indicates if this template is the default template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.UpdateEmailTemplateRequest.IsDynamic">
            <summary>
            Indicates if the content of the email is dynamic.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.UpdateEmailTemplateRequest.StartDate">
            <summary>
            Gets or sets the start date for using this template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.UpdateEmailTemplateRequest.EndDate">
            <summary>
            Gets or sets the end date for using this template.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.EmailTemplates.UpdateEmailTemplateRequest.PlaceholderValues">
            <summary>
            Gets or sets the placeholder values in the email template.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Sections.CreateSectionRequest">
            <summary>
            Represents a request to create a new section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.CreateSectionRequest.Title">
            <summary>
            Gets or sets the title of the section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.CreateSectionRequest.ContentType">
            <summary>
            Gets or sets the type of content in the section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.CreateSectionRequest.Content">
            <summary>
            Gets or sets the content of the section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.CreateSectionRequest.Layout">
            <summary>
            Gets or sets the layout of the section.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Sections.CreateSectionWithAdditonalRequest">
            <summary>
            Represents a request to create a new section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.CreateSectionWithAdditonalRequest.AccessLevel">
            <summary>
            Gets or sets who can see the section
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.CreateSectionWithAdditonalRequest.MetaTags">
            <summary>
            Get or set the SEO meta tags that could be applied to the section
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Sections.SectionResponse">
            <summary>
            Represents a response containing section details.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.SectionResponse.Id">
            <summary>
            Gets or sets the unique identifier for the section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.SectionResponse.Title">
            <summary>
            Gets or sets the title of the section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.SectionResponse.ContentType">
            <summary>
            Gets or sets the type of content in the section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.SectionResponse.Content">
            <summary>
            Gets or sets the content of the section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.SectionResponse.Layout">
            <summary>
            Gets or sets the layout of the section.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.Sections.UpdateSectionRequest">
            <summary>
            Represents a request to update an existing section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.UpdateSectionRequest.Title">
            <summary>
            Gets or sets the title of the section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.UpdateSectionRequest.ContentType">
            <summary>
            Gets or sets the type of content in the section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.UpdateSectionRequest.Content">
            <summary>
            Gets or sets the content of the section.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.Sections.UpdateSectionRequest.Layout">
            <summary>
            Gets or sets the layout of the section.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Models.VerboseApiResponse`1">
            <summary>
            Represents a verbose API response that includes additional metadata for debugging and auditing.
            </summary>
            <typeparam name="T">The type of the data payload.</typeparam>
        </member>
        <member name="P:Ezenity_Backend.Models.VerboseApiResponse`1.StatusCode">
            <summary>
            Gets or sets the HTTP status code indicating the result of the operation.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.VerboseApiResponse`1.Message">
            <summary>
            Gets or sets a human-readable message describing the outcome of the operation.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.VerboseApiResponse`1.IsSuccess">
            <summary>
            Gets or sets a value indicating whether the operation was successful.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.VerboseApiResponse`1.Data">
            <summary>
            Gets or sets the actual data payload returned by the API operation.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.VerboseApiResponse`1.Errors">
            <summary>
            Gets or sets a list of errors that occurred during the API operation.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.VerboseApiResponse`1.DebugInfo">
            <summary>
            Gets or sets additional debug information.
            </summary>
        </member>
        <member name="P:Ezenity_Backend.Models.VerboseApiResponse`1.TimeGenerated">
            <summary>
            Gets or sets the UTC time when the response was generated.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Models.VerboseApiResponse`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Models.VerboseApiResponse`1" /> class.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Models.VerboseApiResponse`1.SetDebugInfo(System.String)">
            <summary>
            Sets additional debug information.
            </summary>
            <param name="info">The debug information.</param>
        </member>
        <member name="T:Ezenity_Backend.Services.Accounts.AccountService">
            <summary>
            Provides services related to account management such as email verification, password reset, CRUD operations, etc.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.#ctor(Ezenity_Backend.Helpers.DataContext,AutoMapper.IMapper,Microsoft.Extensions.Options.IOptions{Ezenity_Backend.Helpers.AppSettings},Ezenity_Backend.Services.Common.IEmailService,Microsoft.Extensions.Logging.ILogger{Ezenity_Backend.Services.Accounts.AccountService},Ezenity_Backend.Helpers.TokenHelper,Ezenity_Backend.Services.Common.IAuthService)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Services.Accounts.AccountService"/> class with required dependencies.
            </summary>
            <param name="context">The data context for database operations.</param>
            <param name="mapper">The AutoMapper instance for object mapping.</param>
            <param name="appSettings">The application settings.</param>
            <param name="emailService">The service for email-related tasks.</param>
            <param name="logger">The logger for logging information.</param>
            <param name="tokenHelper">The helper for generating tokens.</param>
            <param name="authService">The service for authentication-related tasks.</param>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.AuthenticateAsync(Ezenity_Backend.Models.Accounts.AuthenticateRequest,System.String)">
            <summary>
            Authenticates a user and returns an authentication response.
            </summary>
            <param name="model">The authentication request model containing the user credentials.</param>
            <param name="ipAddress">The IP address of the request origin.</param>
            <returns>An IAuthenticateResponse object containing the authentication details.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the account does not exist or is not verified.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AppException">Thrown when the password is incorrect.</exception>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.RefreshTokenAsync(System.String,System.String)">
            <summary>
            Refreshes an existing JWT token.
            </summary>
            <param name="token">The refresh token used to issue a new JWT token.</param>
            <param name="ipAddress">The IP address of the client requesting the token refresh.</param>
            <returns>Returns an <see cref="T:Ezenity_Backend.Models.Accounts.AuthenticateResponse"/> object containing the new JWT and refresh tokens.</returns>
            <exception cref="T:System.Exception">Thrown when the token refresh fails.</exception>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.RevokeTokenAsync(System.String,System.String)">
            <summary>
            Revokes a refresh token.
            </summary>
            <param name="token">The refresh token to revoke.</param>
            <param name="ipAddress">The IP address of the client requesting the token revocation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:System.Exception">Thrown when the token revocation fails.</exception>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.RegisterAsync(Ezenity_Backend.Models.Accounts.RegisterRequest,System.String)">
            <summary>
            Registers a new account.
            </summary>
            <param name="model">The registration request containing the user's details.</param>
            <param name="origin">The origin header from the client request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceAlreadyExistsException">Thrown when the email is already registered.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the origin header is missing.</exception>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.VerifyEmailAsync(System.String)">
            <summary>
            Verifies an account's email using a verification token.
            </summary>
            <param name="token">The verification token.</param>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.InvalidVerificationTokenException">Thrown when the verification token is invalid or expired.</exception>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.ForgotPasswordAsync(Ezenity_Backend.Models.Accounts.ForgotPasswordRequest,System.String)">
            <summary>
            Initiates the password reset process for an account identified by email.
            </summary>
            <param name="model">The request model containing the email of the account.</param>
            <param name="origin">The origin header from the client request.</param>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.ValidateResetTokenAsync(Ezenity_Backend.Models.Accounts.ValidateResetTokenRequest)">
            <summary>
            Validates a password reset token.
            </summary>
            <param name="model">The request model containing the reset token.</param>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AppException">Thrown when the reset token is invalid.</exception>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.ResetPasswordAsync(Ezenity_Backend.Models.Accounts.ResetPasswordRequest)">
            <summary>
            Resets the account's password using a valid reset token.
            </summary>
            <param name="model">The request model containing the new password and reset token.</param>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AppException">Thrown when the reset token is invalid.</exception>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.GetAllAsync">
            <summary>
            Retrieves all accounts.
            </summary>
            <returns>A list of all accounts.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.GetByIdAsync(System.Int32)">
            <summary>
            Retrieves an account by its ID.
            </summary>
            <param name="id">The ID of the account.</param>
            <returns>The account if found; otherwise null.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.CreateAsync(Ezenity_Backend.Models.Accounts.CreateAccountRequest)">
            <summary>
            Creates a new account.
            </summary>
            <param name="model">The request model containing the account details.</param>
            <returns>The created account.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceAlreadyExistsException">Thrown when an account with the provided email already exists.</exception>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.UpdateAsync(System.Int32,Ezenity_Backend.Models.Accounts.UpdateAccountRequest)">
            <summary>
            Updates an existing account.
            </summary>
            <param name="id">The ID of the account to update.</param>
            <param name="model">The request model containing the updated details of the account.</param>
            <returns>The updated account.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the account to update is not found.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AuthorizationException">Thrown when the current user is not authorized to perform the operation.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceAlreadyExistsException">Thrown when the email is already taken.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.DataAccessException">Thrown when an error occurs while updating the resource.</exception>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.DeleteAsync(System.Int32)">
            <summary>
            Asynchronously deletes an account with the given ID.
            </summary>
            <param name="id">The ID of the account to be deleted.</param>
            <returns>Returns a <see cref="T:Ezenity_Backend.Models.DeleteResponse"/> object that represents the status of the deletion.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when no account with the provided ID is found.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AuthorizationException">Thrown when the current user is not authorized to perform the deletion.</exception>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.DeletionFailedException">Thrown when an error occurs during the deletion process.</exception>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.GetAccountAsync(System.Int32)">
            //////////////////
            Helper Methods ///
            //////////////////
            <summary>
            Retrieves the account associated with the given ID.
            </summary>
            <param name="id">The ID of the account to retrieve.</param>
            <returns>The <see cref="T:Ezenity_Backend.Entities.Accounts.Account"/> object associated with the given ID.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when no account is found for the given ID.</exception>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AccountService.FindAndValidateAccountAsync(System.String)">
            <summary>
            Finds and validates an account based on the email provided.
            </summary>
            <param name="email">The email of the account to find and validate.</param>
            <returns>An IAccount object if the account exists and is verified.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.ResourceNotFoundException">Thrown when the account does not exist or is not verified.</exception>
        </member>
        <member name="T:Ezenity_Backend.Services.Accounts.AuthService">
            <summary>
            Service for handling authentication-related tasks.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AuthService.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Services.Accounts.AuthService"/> class.
            </summary>
            <param name="httpContextAccessor">The HTTP context accessor for retrieving context information.</param>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AuthService.GetCurrentUserId">
            <summary>
            Gets the ID of the current user.
            </summary>
            <returns>The ID of the current user.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AuthService.IsCurrentUserAdmin">
            <summary>
            Checks if the current user is an admin.
            </summary>
            <returns>True if the current user is an admin, false otherwise.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.Accounts.AuthService.GetCurrentUserEmail">
            <summary>
            Gets the Email of the current user.
            </summary>
            <returns>The Email of the current user.</returns>
        </member>
        <member name="T:Ezenity_Backend.Services.BaseService`5">
            <summary>
            Abstract base service for common CRUD operations.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.BaseService`5._context">
            <summary>
            The data context used for database operations.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.BaseService`5._mapper">
            <summary>
            The AutoMapper instance used for object-object mapping.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.BaseService`5._appSettings">
            <summary>
            The application settings.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.BaseService`5.#ctor(Ezenity_Backend.Helpers.DataContext,AutoMapper.IMapper,Microsoft.Extensions.Options.IOptions{Ezenity_Backend.Helpers.AppSettings})">
            <summary>
            Initializes a new instance of the BaseService class.
            </summary>
            <param name="context">The data context.</param>
            <param name="mapper">The AutoMapper instance.</param>
            <param name="appSettings">The application settings.</param>
        </member>
        <member name="M:Ezenity_Backend.Services.BaseService`5.GetAllAsync">
            <summary>
            Gets all entities.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.BaseService`5.GetByIdAsync(System.Int32)">
            <summary>
            Gets an entity by its ID.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.BaseService`5.CreateAsync(`2)">
            <summary>
            Creates a new entity based on the provided model.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.BaseService`5.UpdateAsync(System.Int32,`3)">
            <summary>
            Updates an entity based on the provided ID and update model.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.BaseService`5.DeleteAsync(System.Int32)">
            <summary>
            Deletes an entity by its ID.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Services.Common.IAccountService">
            <summary>
            Defines operations related to account management.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IAccountService.AuthenticateAsync(Ezenity_Backend.Models.Accounts.AuthenticateRequest,System.String)">
            <summary>
            Authenticates the user based on the provided model.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IAccountService.RefreshTokenAsync(System.String,System.String)">
            <summary>
            Refreshes the authentication token.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IAccountService.RevokeTokenAsync(System.String,System.String)">
            <summary>
            Revokes the provided token.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IAccountService.RegisterAsync(Ezenity_Backend.Models.Accounts.RegisterRequest,System.String)">
            <summary>
            Registers a new user.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IAccountService.VerifyEmailAsync(System.String)">
            <summary>
            Verifies the email of the user with the given token.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IAccountService.ForgotPasswordAsync(Ezenity_Backend.Models.Accounts.ForgotPasswordRequest,System.String)">
            <summary>
            Sends a password reset email.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IAccountService.ValidateResetTokenAsync(Ezenity_Backend.Models.Accounts.ValidateResetTokenRequest)">
            <summary>
            Validates the reset token.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IAccountService.ResetPasswordAsync(Ezenity_Backend.Models.Accounts.ResetPasswordRequest)">
            <summary>
            Resets the user's password.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Services.Common.IAuthService">
            <summary>
            Provides utility functions for authorization within the application.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IAuthService.GetCurrentUserId">
            <summary>
            Gets the current user's ID.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IAuthService.IsCurrentUserAdmin">
            <summary>
            Checks if the current user is an admin.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IAuthService.GetCurrentUserEmail">
            <summary>
            Gets the email of the current user.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Services.Common.IEmailService">
            <summary>
            Service for sending emails.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IEmailService.SendEmailAsync(Ezenity_Backend.Entities.Emails.EmailMessage)">
            <summary>
            Sends an email based on the provided EmailMessage.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Services.Common.IEmailTemplateService">
            <summary>
            Service for managing email templates.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Common.IEmailTemplateService.GetNonDynamicByIdAsync(System.Int32)">
            <summary>
            Gets an entity by its ID.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Services.Common.ISectionService">
            <summary>
            Service for managing website sections.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Services.Emails.EmailService">
            <summary>
            Provides services for sending emails.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.Emails.EmailService._appSettings">
            <summary>
            Holds the application settings.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.Emails.EmailService._context">
            <summary>
            The data context used for database operations.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.Emails.EmailService._env">
            <summary>
            Provides details about the web hosting environment an application is running in.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Emails.EmailService.#ctor(Microsoft.Extensions.Options.IOptions{Ezenity_Backend.Helpers.AppSettings},Ezenity_Backend.Helpers.DataContext,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Services.Emails.EmailService"/> class.
            </summary>
            <param name="appSettings">Application settings.</param>
            <param name="context">Data context for database operations.</param>
            <param name="env">Web hosting environment details.</param>
        </member>
        <member name="M:Ezenity_Backend.Services.Emails.EmailService.SendEmailAsync(Ezenity_Backend.Entities.Emails.EmailMessage)">
            <summary>
            Sends an email asynchronously.
            </summary>
            <param name="message">The email message to send.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService">
            <summary>
            Provides functionality to manage Email Templates.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService._context">
            <summary>
            Provides data access to the application's data store.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService._mapper">
            <summary>
            Provides object-object mapping functionality.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService._appSettings">
            <summary>
            Provides access to application settings.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService._logger">
            <summary>
            Provides logging capabilities.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService._tokenHelper">
            <summary>
            Provides token generation and validation services.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService._authService">
            <summary>
            Provides user authentication services.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService.#ctor(Ezenity_Backend.Helpers.DataContext,AutoMapper.IMapper,Microsoft.Extensions.Options.IOptions{Ezenity_Backend.Helpers.AppSettings},Microsoft.Extensions.Logging.ILogger{Ezenity_Backend.Services.Common.IEmailTemplateService},Ezenity_Backend.Helpers.TokenHelper,Ezenity_Backend.Services.Common.IAuthService)">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService"/> class.
            </summary>
            <param name="context">Provides data access to the application's data store.</param>
            <param name="mapper">Provides object-object mapping functionality.</param>
            <param name="appSettings">Provides access to application settings.</param>
            <param name="logger">Provides logging capabilities.</param>
            <param name="tokenHelper">Provides token generation and validation services.</param>
            <param name="authService">Provides user authentication services.</param>
        </member>
        <member name="M:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService.GetByIdAsync(System.Int32)">
            <summary>
            Fetches an email template by its ID.
            </summary>
            <param name="id">The ID of the email template to fetch.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the EmailTemplateResponse.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService.CreateAsync(Ezenity_Backend.Models.EmailTemplates.CreateEmailTemplateRequest)">
            <summary>
            Creates a new email template.
            </summary>
            <param name="model">The details for the new email template.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the EmailTemplateResponse for the newly created template.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService.DeleteAsync(System.Int32)">
            <summary>
            Deletes an email template by its ID.
            </summary>
            <param name="id">The ID of the email template to delete.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the DeleteResponse.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService.GetAllAsync">
            <summary>
            Fetches all email templates.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a list of EmailTemplateResponses.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService.UpdateAsync(System.Int32,Ezenity_Backend.Models.EmailTemplates.UpdateEmailTemplateRequest)">
            <summary>
            Updates an existing email template.
            </summary>
            <param name="id">The ID of the email template to update.</param>
            <param name="model">The updated details for the email template.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the updated EmailTemplateResponse.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.EmailTemplates.EmailTemplateService.GetEmailTemplate(System.Int32)">
            //////////////////
            Helper Methods ///
            //////////////////
            <summary>
            Helper method to fetch an email template by its ID.
            </summary>
            <param name="id">The ID of the email template to fetch.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the EmailTemplate.</returns>
        </member>
        <member name="T:Ezenity_Backend.Services.IBaseService`5">
            <summary>
            Interface for common CRUD operations.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.IBaseService`5.GetAllAsync">
            <summary>
            Gets all entities.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.IBaseService`5.GetByIdAsync(System.Int32)">
            <summary>
            Gets an entity by its ID.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.IBaseService`5.CreateAsync(`2)">
            <summary>
            Creates a new entity based on the provided model.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.IBaseService`5.UpdateAsync(System.Int32,`3)">
            <summary>
            Updates an entity based on the provided ID and update model.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.IBaseService`5.DeleteAsync(System.Int32)">
            <summary>
            Deletes an entity by its ID.
            </summary>
        </member>
        <member name="T:Ezenity_Backend.Services.Sections.SectionService">
            <summary>
            Service to handle CRUD operations for sections.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.Sections.SectionService._context">
            <summary>
            Provides data access to the application's data store.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.Sections.SectionService._mapper">
            <summary>
            Provides object-object mapping functionality.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.Sections.SectionService._appSettings">
            <summary>
            Provides access to application settings.
            </summary>
        </member>
        <member name="F:Ezenity_Backend.Services.Sections.SectionService._logger">
            <summary>
            Provides logging capabilities.
            </summary>
        </member>
        <member name="M:Ezenity_Backend.Services.Sections.SectionService.#ctor(Ezenity_Backend.Helpers.DataContext,AutoMapper.IMapper,Microsoft.Extensions.Options.IOptions{Ezenity_Backend.Helpers.AppSettings},Microsoft.Extensions.Logging.ILogger{Ezenity_Backend.Services.Common.ISectionService})">
            <summary>
            Initializes a new instance of the <see cref="T:Ezenity_Backend.Services.Sections.SectionService"/> class.
            </summary>
            <param name="context">Data context for database interaction.</param>
            <param name="mapper">Object mapper for model transformation.</param>
            <param name="appSettings">Application settings.</param>
            <param name="logger">Logger instance.</param>
        </member>
        <member name="M:Ezenity_Backend.Services.Sections.SectionService.GetByIdAsync(System.Int32)">
            <summary>
            Retrieves a section by its identifier.
            </summary>
            <param name="id">Section identifier.</param>
            <returns>The section details.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.Sections.SectionService.CreateAsync(Ezenity_Backend.Models.Sections.CreateSectionRequest)">
            <summary>
            Creates a new section.
            </summary>
            <param name="model">Data for creating the section.</param>
            <returns>The newly created section.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.Sections.SectionService.CreateWithAdditionalAsync(Ezenity_Backend.Models.Sections.CreateSectionWithAdditonalRequest)">
            <summary>
            Asynchronously creates a new section with additional information.
            </summary>
            <param name="model">The request model containing the details for the new section.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the created section details.</returns>
            <exception cref="T:Ezenity_Backend.Helpers.Exceptions.AppException">Thrown when the section title already exists.</exception>
        </member>
        <member name="M:Ezenity_Backend.Services.Sections.SectionService.DeleteAsync(System.Int32)">
            <summary>
            Deletes a section by its identifier.
            </summary>
            <param name="id">Section identifier.</param>
            <returns>Response after deletion.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.Sections.SectionService.GetAllAsync">
            <summary>
            Retrieves all available sections.
            </summary>
            <returns>List of all sections.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.Sections.SectionService.UpdateAsync(System.Int32,Ezenity_Backend.Models.Sections.UpdateSectionRequest)">
            <summary>
            Updates an existing section.
            </summary>
            <param name="id">Section identifier.</param>
            <param name="model">Data for updating the section.</param>
            <returns>The updated section.</returns>
        </member>
        <member name="M:Ezenity_Backend.Services.Sections.SectionService.GetSection(System.Int32)">
            <summary>
            Helper method to fetch a section by its identifier.
            </summary>
            <param name="id">Section identifier.</param>
            <returns>The section entity.</returns>
        </member>
    </members>
</doc>
